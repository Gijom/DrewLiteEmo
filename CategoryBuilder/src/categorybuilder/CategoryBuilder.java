/*
 * CategoryBuilder.java
 *
 * Created on March 22, 2007, 10:53 AM
 */
package CategoryBuilder.src.categorybuilder;

import javax.swing.*;
import java.io.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;

/**
 *
 * @author  collins
 */
public class CategoryBuilder extends javax.swing.JFrame {

	private DefaultListModel itemListModel;

	// contains list of Java colors associated with their names
	Object[] colorList = { 
			new ColoredObject(Color.RED,"Red"), 
			new ColoredObject(new Color(255,50,0),"Rainbow Orange"),
			new ColoredObject(Color.YELLOW,"Yellow"),
			new ColoredObject(Color.GREEN,"Green"),
			new ColoredObject(Color.BLUE,"Blue"),
			new ColoredObject(new Color(0,0,50),"Rainbow Dark Blue"),
			new ColoredObject(new Color(80,0,80),"Rainbow Purple"),			
			new ColoredObject(Color.DARK_GRAY,"DarkGray"),
			new ColoredObject(Color.GRAY,"Gray"),
			new ColoredObject(Color.LIGHT_GRAY,"Light Gray"),
			new ColoredObject(Color.MAGENTA,"Magenta"),
			new ColoredObject(Color.ORANGE,"Orange"),
			new ColoredObject(Color.CYAN,"Cyan"),
			new ColoredObject(Color.PINK,"Pink"),
			new ColoredObject(Color.WHITE,"White"),
			new ColoredObject(Color.BLACK,"Black"),
			// to add a color to the list use the following model :
			// new ColoredObject(new Color(100,200,100),"My home-made green")
	};

	/** Creates new form CategoryBuilder */
	public CategoryBuilder() {
		// instanciate list model to be able to use it in the JList constructor
		itemListModel = new DefaultListModel();
		// init graphical interface
		initComponents();
		// set costum  color renderers for checkbox and list
		colorListCB.setRenderer(new ColoredRenderer());
		itemList.setCellRenderer(new ColoredRenderer());
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        nameTF = new javax.swing.JTextField();
        colorListCB = new JComboBox(colorList);
        addButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        delButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();

        itemList = new javax.swing.JList(itemListModel);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Category Builder");

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(2, 1));

        nameTF.setColumns(16);
        nameTF.setText("new item name");
        nameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameTFKeyPressed(evt);
            }
        });

        jPanel3.add(nameTF);

        jPanel3.add(colorListCB);

        addButton.setText(" + Add item");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jPanel3.add(addButton);

        jPanel2.add(jPanel3);

        delButton.setText("- Remove selected item");
        delButton.setEnabled(false);
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });

        jPanel5.add(delButton);

        saveButton.setText("Save Category");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jPanel5.add(saveButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jPanel5.add(closeButton);

        jPanel2.add(jPanel5);

        jPanel1.add(jPanel2, java.awt.BorderLayout.SOUTH);

        jPanel4.setLayout(new java.awt.BorderLayout());

        itemList.setBackground(new java.awt.Color(184, 207, 229));
        itemList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        itemList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemListKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(itemList);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void itemListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemListKeyPressed
// TODO add your handling code here:
    	// if supp/del key is pressed
    	if( evt.getKeyCode() == 127 ) {
    		// call remove item function
    		delButtonActionPerformed(null);    	
    	}
    }//GEN-LAST:event_itemListKeyPressed

    private void nameTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTFKeyPressed
// TODO add your handling code here:
		//System.err.println("key code:"+evt.getKeyCode());
    	// if 'return' is pressed in textfield
    	if( evt.getKeyCode() ==10 ) {
    		// call add new item function
    		addButtonActionPerformed(null);
    	}
    }//GEN-LAST:event_nameTFKeyPressed

	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
//		TODO add your handling code here:
		// check if list is empty
		if( ! itemListModel.isEmpty() ) {
			// ask for category name :
			String categoryName = JOptionPane.showInputDialog("Give a name to this categorisation list :");
			ColoredObject item;

			JFileChooser jfc = new JFileChooser();
			jfc.setSize(400, 300);
			Container parent = saveButton.getParent();
			int choice = jfc.showSaveDialog(parent);

			if (choice == JFileChooser.APPROVE_OPTION)
			{
				String filename = jfc.getSelectedFile().getAbsolutePath();
				File f = new File(filename);
				if( f.exists() ){
					JOptionPane.showMessageDialog( null, 
							"File already exists. Please save into another file.", 
							null, JOptionPane.ERROR_MESSAGE );
					return;
				}

				Hashtable ht = new Hashtable();
				for( int i=0; i < colorList.length ; i++) {
					ht.put( ((ColoredObject)colorList[i]).getColor() , ((ColoredObject)colorList[i]).getObject() );
				}

				try { 
					BufferedWriter bw = new BufferedWriter(new FileWriter(filename));
					bw.write("<"+categoryName+">\n");
					Enumeration e=itemListModel.elements();
					while( e.hasMoreElements() ){
						item = (ColoredObject)e.nextElement();
						bw.write("<color ");
						bw.write("value=\""+ht.get(item.getColor())+"\" ");
						bw.write("R=\""+item.getColor().getRed()+"\" ");
						bw.write("G=\""+item.getColor().getGreen()+"\" ");
						bw.write("B=\""+item.getColor().getBlue()+"\" ");
						bw.write(">"+item.getObject().toString()+"</color>\n");
					}
					bw.write("</"+categoryName+">\n");
					bw.flush();
					bw.close();
				} catch (IOException ioe) { 
					System.err.println("IOexception :"+ioe.toString() );
				}
			}
		} else {
			JOptionPane.showMessageDialog( null, 
					"No need to save : empty item list", 
					null, JOptionPane.ERROR_MESSAGE );
		}
	}//GEN-LAST:event_saveButtonActionPerformed

	private void delButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delButtonActionPerformed
//		TODO add your handling code here:

		int index = itemList.getSelectedIndex();
		itemListModel.remove(index);

		int size = itemListModel.getSize();

		if (size == 0) { //Nobody's left, disable remove button.
			delButton.setEnabled(false);

		} else { //Select an index.
			if (index == itemListModel.getSize()) {
				//removed item in last position
				index--;
			}

			itemList.setSelectedIndex(index);
			itemList.ensureIndexIsVisible(index);
		}
	}//GEN-LAST:event_delButtonActionPerformed

	private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
//		TODO add your handling code here: 
		Object[] options = { "OK", "Cancel" };
		int userChoice = JOptionPane.showOptionDialog(null, "Really close Category Builder ? (all no saved modifications will be discarded",
				"Confirm close",	JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
				null, options, options[0]);
		if( options[userChoice].equals(options[0]) ) { 
			this.dispose();
		}
	}//GEN-LAST:event_closeButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
		// TODO add your handling code here:
		String name = nameTF.getText();
		Color color = ((ColoredObject)colorListCB.getSelectedItem()).getColor();

		if(name.equals("") ) {
			JOptionPane.showMessageDialog( null, 
					"Empty item name", 
					null, JOptionPane.ERROR_MESSAGE );
			return;
		}

		//User didn't type in a unique name...
		if ( alreadyInList(name)) {
			nameTF.requestFocusInWindow();
			nameTF.selectAll();
			JOptionPane.showMessageDialog( null, 
					"Item already exists in list", 
					null, JOptionPane.ERROR_MESSAGE );
			return;
		}

		int index = itemList.getSelectedIndex(); //get selected index
		if (index == -1) { //no selection, so insert at beginning
			index = 0;
		} else {           //add after the selected item
			index++;
		}

		itemListModel.insertElementAt(new ColoredObject(color,nameTF.getText()), index);
		//If we just wanted to add to the end, we'd do this:
		//listModel.addElement(nameTF.getText());

		//Reset the text field.
		nameTF.requestFocusInWindow();
		nameTF.setText("new item name");
		nameTF.selectAll();

		//Select the new item and make it visible.
		itemList.setSelectedIndex(index);
		itemList.ensureIndexIsVisible(index);
		// make sur delButton is enabled
		delButton.setEnabled(true);
	}//GEN-LAST:event_addButtonActionPerformed


	// colored object class
	// links a color and and object
	class ColoredObject {
		Color color;
		Object object;
		public ColoredObject(Color color, Object object) {
			this.color=color;
			this.object=object;
		}
		public Object getObject() { return object; }
		public Color getColor() { return color; }
		public String toString() { return object.toString(); }
	}

	// our cell renderer
	// lets us use background colors for the list and combobox
	// also lets us change how the selected element is redered
	class ColoredRenderer extends DefaultListCellRenderer {
		public Component getListCellRendererComponent(JList list, Object value,
				int index, boolean isSelected, boolean hasFocus) {
			// call super and get the Jlabel to work on
			JLabel label = (JLabel)super.getListCellRendererComponent(list, value, index, 
					isSelected,hasFocus);

			// if selected change text color and make a border
			if(isSelected){
				setBorder(BorderFactory.createLineBorder(Color.black, 2));
				setForeground(Color.white);
			}
			// if object is one of our coloredObjects: set background to corresponding color
			if ( value instanceof  ColoredObject ) {
				label.setBackground(((ColoredObject)value).getColor());
			}

			return label;
		}
	}


	// checks if a string is already in the list 
	protected boolean alreadyInList(String name) {
		Enumeration e = itemListModel.elements();
		if( e != null ){
			ColoredObject co; 
			while(e.hasMoreElements() ) {
				co = (ColoredObject)e.nextElement();
				if( co.getObject().equals(name) ) {
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new CategoryBuilder().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JComboBox colorListCB;
    private javax.swing.JButton delButton;
    private javax.swing.JList itemList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameTF;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

}
