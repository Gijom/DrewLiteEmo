/*
 * TraceViewer.java
 *
 * Created on 23 octobre 2006, 14:57
 */

/**
 *
 * @author  collins
 */


package Drew.TraceViewer;

import java.util.*;
import java.io.*;
import javax.swing.*;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import org.xml.sax.SAXException;

import Drew.TraceViewer.DrewStream;

public class TraceViewer extends javax.swing.JFrame {
    
    private Vector listData;
    private File dir    ;
    static TransformerFactory tFactory = TransformerFactory.newInstance();
    static DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance();
    private InputStream xsl;
    private InputStream xml;
                
    
    static void doit(InputStream xsl,InputStream xml,OutputStream out) {
	try {
	    // And setNamespaceAware, which is required when parsing xsl files
	    dFactory.setNamespaceAware(true);
	    
	    //Use the DocumentBuilderFactory to create a DocumentBuilder.
	    DocumentBuilder dBuilder = dFactory.newDocumentBuilder();
      
	    //Use the DocumentBuilder to parse the XML document
	    //Document xmlDoc = dBuilder.parse("drew.xml");
      			// Use the DOM Document to define a DOMSource object.
	    
			//DOMSource xslDomSource = new DOMSource(dBuilder.parse(xsl));
			//DOMSource xmlDomSource = new DOMSource(dBuilder.parse(xml));
			Source xslSource = new StreamSource(xsl);
			Source xmlSource = new StreamSource(xml);

			// Process the stylesheet DOMSource and generate a Transformer.
			Transformer transformer = tFactory.newTransformer(xslSource);
			transformer.transform( xmlSource, new StreamResult( out ) );
			out.flush();
		}
    		catch (Exception e) {
      			e.printStackTrace(System.err);
    		}
  	}
        
        
// filters files we can treat.
    // returns only files with .utf8 extension
    FilenameFilter filter = new FilenameFilter() {
	    public boolean accept(File dir,String name) {
		return name.endsWith(".utf8");
	    }
	};
        
        
        void updateFileList() {
            dir = new File(".");
            String dirList[] = dir.list(filter);
            for(int i=0 ; i<dirList.length ; i++) {
                listData.addElement(dirList[i].toString());
                //System.err.println("i:"+i+" "+dirList[i]+" cap:"+listData.capacity());  
            }
            fileJList = new JList(listData);
            jScrollPane1.getViewport().setView(fileJList);
            if(listData.isEmpty()) {
                htmlButton.setEnabled(false);
                excelButton.setEnabled(false);
                replayButton.setEnabled(false);
                logTextArea.append("No trace files found... Please quit tool.\n");
                logTextArea.append("Hint: Try placing trace files (.utf8 files) in same directory as the program, and restart the program.");
            } else {
                logTextArea.append("Found "+listData.size()+" trace files.\n");
                fileJList.setSelectedIndex(0);
            }
        }
        
    /**
     * Creates new form TraceViewer 
     */
    public TraceViewer() throws Exception{
        initComponents();
        // initialize the list
        listData = new Vector();
        updateFileList();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileJList = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        htmlButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        excelButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        replayButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        splitButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        quitButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Transform trace files (.utf8)  to HTML(.html) & Excel(.xls) files");
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.X_AXIS));

        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Trace files found:");
        jPanel2.add(jLabel1, java.awt.BorderLayout.NORTH);

        fileJList.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        fileJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fileJList.setToolTipText("Select a trace file from list");
        jScrollPane1.setViewportView(fileJList);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2);

        jPanel3.setLayout(new java.awt.GridLayout(7, 1));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("1. Select a trace file in the list (left) ");
        jPanel3.add(jLabel2);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("2. Clic on disired action (below)");
        jPanel3.add(jLabel3);

        htmlButton.setText("Make HTML file");
        htmlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                htmlButtonActionPerformed(evt);
            }
        });

        jPanel4.add(htmlButton);

        jPanel3.add(jPanel4);

        excelButton.setText("Make Excel file");
        excelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelButtonActionPerformed(evt);
            }
        });

        jPanel5.add(excelButton);

        jPanel3.add(jPanel5);

        replayButton.setText("Replay");
        replayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replayButtonActionPerformed(evt);
            }
        });

        jPanel6.add(replayButton);

        jPanel3.add(jPanel6);

        splitButton.setText("Extract Rooms");
        splitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitButtonActionPerformed(evt);
            }
        });

        jPanel8.add(splitButton);

        jPanel3.add(jPanel8);

        quitButton.setText("Quit tool");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        jPanel7.add(quitButton);

        jPanel3.add(jPanel7);

        jPanel1.add(jPanel3);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        logTextArea.setEditable(false);
        logTextArea.setLineWrap(true);
        logTextArea.setRows(8);
        jScrollPane2.setViewportView(logTextArea);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.SOUTH);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void splitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitButtonActionPerformed
// TODO add your handling code here:
       File outputFile;
	String newFileName;
	FileOutputStream outputStream;
	String selectedFile = fileJList.getSelectedValue().toString();
	logTextArea.append("Extracting tracefiles...\n");
	
        try{
            xml = new DrewStream( new FileInputStream( selectedFile ) ); 
        } catch(FileNotFoundException e) {
	    logTextArea.append("Error: couldn't open/find "+selectedFile+"\nHint: Try restarting program.");
            e.printStackTrace(System.err);
            return;
        }
        
	//extract list of rooms
	// setNamespaceAware, which is required when parsing xsl files
	dFactory.setNamespaceAware(true);
	HashSet allrooms = new HashSet();
	try {
	    DocumentBuilder dBuilder = dFactory.newDocumentBuilder();
	    Document tracedoc = dBuilder.parse(xml);
	    Element traceroot = tracedoc.getDocumentElement();
	    for (int i=0; i<traceroot.getChildNodes().getLength();i++) {
		Node inode = traceroot.getChildNodes().item(i);
		if (inode.getNodeType()==Node.ELEMENT_NODE) {
		    String roomname = ((Element) inode).getAttribute("room");
		    if (!roomname.equals("")) {
			allrooms.add(roomname);
		    }
		}
	    }
	} catch (Exception e) {
	    logTextArea.append("problem parsing file to be split");
	}
	
        try{
	    xml.close();
        } catch(Exception e) {
	    logTextArea.append("Error: couldn't open/find "+selectedFile+"\nHint: Try restarting program.\n");
            e.printStackTrace(System.err);
            return;
        }
	
        if(allrooms.size()<2) {
            logTextArea.append("There is only one room in this trace file. No new trace files were made.\n");
            return;
        }
	for(Iterator i = allrooms.iterator();i.hasNext();) {
	    try{
		xsl = new FileInputStream( "xsl/salle.xsl" );
	    } catch(FileNotFoundException e) {
		
		logTextArea.append("Internal Error: file xsl/salle.xsl not found.\nHint: try reinstalling program.\n");
		e.printStackTrace(System.err);
		return;
	    }
	    try{
		xml = new DrewStream( new FileInputStream( selectedFile ) ); 
	    } catch(FileNotFoundException e) {
		logTextArea.append("Error: couldn't open/find "+selectedFile+"\nHint: Try restarting program.");
		e.printStackTrace(System.err);
		return;
	    }
	    
	    String roomname = (String) i.next();
	    String niceroomname = roomname.replace(' ','_');
	    newFileName = new String(selectedFile.substring(0,selectedFile.length()-5)+"_"+niceroomname+".utf8");
	    outputFile = new File(newFileName);
	    if(outputFile.exists()) {
		logTextArea.append(newFileName+" already exists; you must have already split this trace. To avoid loosing data no processing has been done.\nHint: Try renaming "+newFileName+" or moving it to another directory\n");
		
                return;
	    }
	    try{
		outputStream = new FileOutputStream(outputFile);
	    } catch (FileNotFoundException e){
		logTextArea.append("Error: couldn't create "+newFileName+".\n");
		e.printStackTrace(System.err);
		return;
	    }
            //doit( xsl, xml, System.out);

	    try {
		Source xslSource = new StreamSource(xsl);
		Source xmlSource = new StreamSource(xml);
		
		// Process the stylesheet DOMSource and generate a Transformer.
		Transformer transformer = tFactory.newTransformer(xslSource);
		transformer.setParameter("salle", roomname) ;
		transformer.transform( xmlSource, new StreamResult( outputStream ) );
		outputStream.flush();
	    }
	    catch (Exception e) {
		e.printStackTrace(System.err);
	    }
	    
            try{
                outputStream.close();
                xml.close();
                xsl.close();
            } catch(IOException e) {
		logTextArea.append("Error closing necessary files. CAUTION:Your new file might not have been generated properly. Process will continue but it is advised to exit program and check your newly generated file.\n");
		e.printStackTrace(System.err);
            }
            
	    logTextArea.append("Trace for room "+roomname+" extracted from "+selectedFile+" and saved in "+newFileName+"\n");
	}
	logTextArea.append("Trace separated into "+allrooms.size()+" individual traces.\n");
        listData = new Vector(); 
        updateFileList();
    }//GEN-LAST:event_splitButtonActionPerformed

    private void replayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replayButtonActionPerformed
// TODO add your handling code here:
        Drew.Client.App.player app = new Drew.Client.App.player();
 	try {
 		Properties defaultProperties = new Properties();
			
 		// When using the class loader, it looks at the root of the jar archive
 		defaultProperties.load( app.getClass().getClassLoader().getResourceAsStream("client.properties"));

 		for( Enumeration e = defaultProperties.propertyNames(); e.hasMoreElements() ;) {
 			// Add the property only if not defined on command line
 			String key = (String) e.nextElement();
 			if(System.getProperties().getProperty(key) == null) {
 				System.getProperties().setProperty( key,defaultProperties.getProperty(key) );
 			}
 		}
 	} catch( IOException e ){
 		System.err.println( "Can't read play.properties" );
 	}

	// corrects problem of caracters not showing properly
	System.setProperty("encoding","UTF-8");

 	System.getProperties().list( System.err );

	// launche replayer with trace file loaded
	app.set( new Drew.Client.Rejoueur.CentreDeConnection(fileJList.getSelectedValue().toString()) );
	app.start();

    }//GEN-LAST:event_replayButtonActionPerformed

    private void excelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelButtonActionPerformed
// TODO add your handling code here:
         //logTextArea.append("Button2 pressed\n");
         File outputFile;
         String newFileName;
         FileOutputStream outputStream;
         String selectedFile = fileJList.getSelectedValue().toString();
         //logTextArea.append("Beginning process...\n");
        try{
            xsl = new FileInputStream( "xsl/toSYLK_en.xsl" );
        } catch(FileNotFoundException e) {
        
            logTextArea.append("Internal Error: file xsl/toSYLK_fr.xsl not found.\nHint: try reinstalling program.\n");
            e.printStackTrace(System.err);
            return;
        }
        try{
            xml = new DrewStream( new FileInputStream( selectedFile ) ); 
        } catch(FileNotFoundException e) {
            logTextArea.append("Error: couldn't open/find "+selectedFile+"\nHint: Try restarting program.");
            e.printStackTrace(System.err);
            return;
        }
        
        // java 1.5 
        // newFileName = new String(selectedFile.replace(".utf8",".xls"));
        
        // java 1.4
        newFileName = new String(selectedFile.substring(0,selectedFile.length()-5)+".xls");
         
        outputFile = new File(newFileName);
        if(outputFile.exists()) {
                logTextArea.append(newFileName+" already exists. To avoid loosing data no processing has been done.\nHint: Try renaming "+newFileName+" or moving it to another directory.\n");
       
                return;
       }
        
        try{
           outputStream = new FileOutputStream(outputFile);
        } catch (FileNotFoundException e){
            logTextArea.append("Error: couldn't create "+newFileName+".\n");
            e.printStackTrace(System.err);
            return;
        }
            //doit( xsl, xml, System.out);
            doit( xsl, xml, outputStream);
            try{
                outputStream.close();
                xml.close();
                xsl.close();
            } catch(IOException e) {
                logTextArea.append("Error closing necessary files. CAUTION:Your new file might not have been generated properly. Process will continue but it is advised to exit program and check your newly generated file.\n");
                e.printStackTrace(System.err);
            }
            
            logTextArea.append("File "+selectedFile+" converted to: "+newFileName+"\n");
            //logTextArea.append("End of process...");
    }//GEN-LAST:event_excelButtonActionPerformed

    private void htmlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_htmlButtonActionPerformed
// TODO add your handling code here:
    //logTextArea.append("Button HTML pressed\n");
         File outputFile;
         String newFileName;
         FileOutputStream outputStream;
         String selectedFile = fileJList.getSelectedValue().toString();
         //logTextArea.append("Beginning process...\n");
        try{
            xsl = new FileInputStream( "xsl/toHTML_fr.xsl" );
        } catch(FileNotFoundException e) {
        
            logTextArea.append("Internal Error: file xsl/toHTML_fr.xsl not found.\nHint: try reinstalling program.\n");
            e.printStackTrace(System.err);
            return;
        }
        try{
            xml = new DrewStream( new FileInputStream( selectedFile ) ); 
        } catch(FileNotFoundException e) {
            logTextArea.append("Error: couldn't open/find "+selectedFile+"\nHint: Try restarting program.");
            e.printStackTrace(System.err);
            return;
        }
        
        // java 1.5 
        // newFileName = new String(selectedFile.replace(".utf8",".xls"));
        
        // java 1.4
        newFileName = new String(selectedFile.substring(0,selectedFile.length()-5)+".html");
         
        outputFile = new File(newFileName);
        if(outputFile.exists()) {
                logTextArea.append(newFileName+" already exists. To avoid loosing data no processing has been done.\nHint: Try renaming "+newFileName+" or moving it to another directory.\n");
       
                return;
       }
        
        try{
           outputStream = new FileOutputStream(outputFile);
        } catch (FileNotFoundException e){
            logTextArea.append("Error: couldn't create "+newFileName+".\n");
            e.printStackTrace(System.err);
            return;
        }
            //doit( xsl, xml, System.out);
            doit( xsl, xml, outputStream);
            try{
                outputStream.close();
                xml.close();
                xsl.close();
            } catch(IOException e) {
                logTextArea.append("Error closing necessary files. CAUTION:Your new file might not have been generated properly. Process will continue but it is advised to exit program and check your newly generated file.\n");
                e.printStackTrace(System.err);
            }
            
            logTextArea.append("File "+selectedFile+" converted to: "+newFileName+"\n");
            //logTextArea.append("End of process...");
    }//GEN-LAST:event_htmlButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
// TODO add your handling code here:
            System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try{
                new TraceViewer().setVisible(true);
            }catch(Exception e){
                e.printStackTrace(System.err);
            }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton excelButton;
    private javax.swing.JList fileJList;
    private javax.swing.JButton htmlButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton replayButton;
    private javax.swing.JButton splitButton;
    // End of variables declaration//GEN-END:variables
    
}
