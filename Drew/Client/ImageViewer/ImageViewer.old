/*  
 * The Drew software is a CMI (Computer Mediated Interaction) set of tools that
 * combines synchronous exchanges activities with browser-driven web page
 * consultation.
 * Copyright (C) 2003  The Drew Team
 * 
 * The Drew software is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * The Drew software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * File: ImageViewer.java
 * Author: Steven COLLINS
 * Description: outil simple qui visiualise sous forme de camemberts l'activite des utilisateurs par outil
 *
 * $Id: ImageViewer.java,v 1.10 2006/11/16 10:28:44 collins Exp $
 */

package Drew.Client.ImageViewer;

import java.net.*;
import java.io.*;
import java.awt.event.*;
import java.awt.*;
import java.io.IOException;
import javax.swing.*;
import javax.swing.text.*;
import java.util.*;

import java.awt.Font;
import javax.swing.JPanel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
//import org.jfree.ui.ApplicationFrame;
//import org.jfree.ui.RefineryUtilities;

import Drew.Client.Util.*;
import Drew.Util.XMLmp.*;

public class ImageViewer extends Panel implements CooperativeModule {

    /**
     * code <EM>unique</EM> represntatnt les messages en provenance ou a destiniton de ce module
     * en l'occurence <CODE>cht</CODE>
     */
    static final String CODE = "ImageViewer";

    /**
     * Recuper l'applet-mere
     * @see Communication
     */
    public Communication central_applet;

    /**
     * The XML object used to send messages
     */
    private XMLTree msg   = null;
    private XMLTree event = null;
 
    Vector data; // will contain list of pictures
    Image image;


    /**
     * Constructeur de la fenetre de chat: definition de l'environnement graphique
     * @param    cdc instance de l'applet de communication
     * @see Communication
     */
    public ImageViewer() 
    {
    }

    /**
     * Constructeur de la fenetre de chat: definition de l'environnement graphique
     * @param    cdc instance de l'applet de communication
     * @see Communication
     */
    public ImageViewer(Communication cdc) 
    {
	this();
	constructor(cdc);
    }

    /**
     * pour terminer la construction de la fenetre du ImageViewer,  Class.newInstance()
     * n'appelle que le contructeur par defaut de la classe.
     * @param    cdc instance de l'applet de communication
     * @see Communication
     * @see Drew.Client.Util.CooperativeModule
     * @see Drew.Client.TableauDeBord.Module
     */
    public void constructor(Communication cdc) {
	central_applet=cdc;

	System.err.println( "ImageViwer tool created (" + this.hashCode() + ")" );
    }

    /* surcharge des methodes de Component */
    public Dimension getPreferredSize()
    {
	return new Dimension(320,200);
    }


    // implantation de l'interface CooperativeModule 

    public String getTitle() {
	return "ImageViewer";
    }

    public void init() 
    {
	data = new Vector();

	this.setLayout(new BorderLayout());

	// initialise data vector
	Vector v = new Vector();
	
	// list files in images/ directory and add to data vector
	String fileName;
	File imageDirectory=new File("images");
	String dirList[] = imageDirectory.list();

	Toolkit toolkit = Toolkit.getDefaultToolkit();
	System.err.print("dirList0 "+dirList[0]+"\n");
	System.err.print("dirList1 "+dirList[1]+"\n");
	image = toolkit.getImage(dirList[1]);
	
	add(image);
  

    }
    
    public void paint( Graphics g){
	super.paint(g);
	g.drawImage(image,0,0,this);
    }
    

    /**
     * module is started
     */
    public void start()
    {
    }

    /**
     * arret du module
     */
    public void stop()
    {
    }

    /**
     * destruction du module
     */
    public void destroy() 
    {
	stop();
    }
  
    /**
     * effacement des donnees du module
     */
    public void clear() {
    }

    /**
     * return as String the uniq identifier for the drewlet
     */
    public String getCode() 
    {
	return CODE;
    }


    /**
     * get only messages if code == CODE
     */
    public boolean messageFilter(XMLTree event) {
	return true;
    }

    public void messageDeliver(String user, XMLTree msg) {




    }

    protected void finalize() throws Throwable {
	System.err.println( "ImageViewer finalised (" + this.hashCode() + ")" );
    }



}

    
